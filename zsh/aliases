# Default Options
# ===============

# colorized output
# ----------------
alias ls='ls --color=auto'
[[ "$OS_DISTRO" != "freebsd" ]] || alias ls='ls -G'
alias grep='grep --color=auto'
alias wifi='net wifi'
becho() { echo '\033[0;34m'$@'\033[0m' ; }
gecho() { echo '\033[0;32m'$@'\033[0m' ; }
recho() { echo '\033[0;31m'$@'\033[0m' ; }

# longer tail/head
# ----------------
alias tail='tail -n30'
alias head='head -n30'

# compression
# -----------
alias tarx='tar -xvf'
tarc() { tar -cvf $1.tar $1 }
zipd() { zip -rv $1.zip $1 }
alias unrar='unrar e'

# shorter git
# -----------
alias g=git

# nicer diff
# ----------
alias gdiff='git diff --no-index'

# local bin
# ---------
local_bin() { export PATH=$DOTFILES/bin:$HOME/.local/bin:$PATH ; }

# file subtraction
# ----------------
fminus() {
    subtractFrom="$1"
    subtractOut="$2"
    grep --fixed-strings --line-regexp --invert-match --file "$subtractOut" "$subtractFrom"
}

# ssh_agent
# ---------
ssh_agent_setup() {
    proc="$(ps aux | grep 'ssh-agent -s' | grep -v grep | tr --squeeze-repeats '[:space:]')"
    [[ "$?" != '0' ]] \
        && eval $(ssh-agent -s) \
        && return 0
    pid="$(echo "$proc" | cut --delimiter=' ' --field='2')"
    SSH_AGENT_PID="$pid" ssh-agent -k
    eval $(ssh-agent -s)
    ssh-add ~/.ssh/user
}

# Shortcut Commands
# =================

# shortcuts in home directory
# ---------------------------
shortcut() {
    short_path="$1"
    long_path="$short_path"
    if [[ ! -f "$short_path" && ! -d "$short_path" ]]; then
        case "$short_path" in
            '')         long_path="$HOME"                                               ;;
            '-')        long_path="-"                                                   ;;
            contacts)   long_path="$DOTFILES/mail/mutt/contacts"                        ;;
            aliases)    long_path="$DOTFILES/zsh/aliases"                               ;;
            schedule)   long_path="$HOME/personal/schedule.md"                          ;;
            wifi)       long_path="$DOTFILES/etc/wpa_supplicant/wifi_networks"          ;;
            ssh)        long_path="$HOME/.ssh/config"                                   ;;
            ledger)     long_path="$HOME/admin/ledger/current.ledger"                   ;;
            csm-pl)     long_path="$HOME/work/csm-prog-lang${short_path#csm-pl}"        ;;
            src*)       long_path="$SRC/${short_path#src}"                              ;;
            maude*)     long_path="$SRC/maude${short_path#maude}"                       ;;
            tangle*)    long_path="$SRC/pandoc-tangle${short_path#tangle}"              ;;
            psi*)       long_path="$SRC/psi${short_path#psi}"                           ;;
            ising*)     long_path="$HOME/work/ising${short_path#ising}"                 ;;
            dotfiles*)  long_path="$DOTFILES${short_path#dotfiles}"                     ;;
            bin*)       long_path="$DOTFILES/bin${short_path#bin}"                      ;;
            500*)       long_path="$HOME/work/class/uiuc-math500${short_path#500}"      ;;
            570*)       long_path="$HOME/work/class/uiuc-math570${short_path#570}"      ;;
            584*)       long_path="$HOME/work/uiuc-cs584${short_path#584}"              ;;
            576*)       long_path="$HOME/reads/uiuc-cs576${short_path#576}"             ;;
            476*)       long_path="$HOME/work/ta/cs476/fa2017${short_path#476}"         ;;
            evm*)       long_path="$HOME/src/evm-semantics${short_path#evm}"            ;;
            plutus*)    long_path="$HOME/src/plutus-core-semantics${short_path#plutus}" ;;
            wasm*)      long_path="$HOME/src/wasm-semantics${short_path#wasm}"          ;;
            fm*)        long_path="$HOME/work/fm_seminar${short_path#fm}"               ;;
            kat*)       long_path="$HOME/src/kat/${short_path#kat}"                     ;;
            oppen*)     long_path="$HOME/work/oppen-bus${short_path#oppen}"             ;;
            k*)         long_path="$HOME/src/k${short_path#k}"                          ;;
            reads*)     long_path="$HOME/reads${short_path#reads}"                      ;;
            scratch*)   long_path="$SCRATCH${short_path#scratch}"                       ;;
        esac
    fi
    printf "%s\n" "$long_path"
}

# eventually replace with
#hash -d -- mutt="$DOTFILES/mail/mutt/"         ;;
#hash -d -- zsh="$DOTFILES/zsh"                 ;;
#hash -d -- maude="$SRC/maude"                  ;;
#hash -d -- dotfiles="$DOTFILES"                ;;
#hash -d -- bin="$DOTFILES/bin"                 ;;
#hash -d -- 500="$HOME/work/class/uiuc-math500" ;;
#hash -d -- 570="$HOME/work/class/uiuc-math570" ;;
#hash -d -- 576="$HOME/work/uiuc-cs576"         ;;
#hash -d -- fm="$HOME/work/fm_seminar"          ;;
#hash -d -- k="$HOME/work/k"                    ;;
#hash -d -- scratch="$SCRATCH"                  ;;
#hash -d -- evm="$HOME/work/evm-modeling"       ;;
#hash -d -- reviews="$HOME/work/reviews"        ;;

# shortcut cd
# -----------
chpwd() { ls ; } # ls when cd
c() {
    dirname="$1"
    [[ ! -z "$dirname" ]] && shift
    actual_dir="$(shortcut "$dirname")"
    cd "$@" "$actual_dir"
}

# shortcut mv and cd
# ------------------
mc() {
    dirname="$1" && shift
    actual_dir="$(shortcut "$dirname")"
    [[ ! -d "$actual_dir" ]] \
        && recho "Not a directory: '$actual_dir'" \
        && return 1
    mv "$@" "$actual_dir"
    cd "$actual_dir"
}

# shortcut editor
# ---------------
e() {
    file="$1" && shift
    actual_file="$(shortcut "$file")"
    $EDITOR "$@" "$actual_file"
}

# shortcut viewer
# ---------------
v() {
    pdf="$1" && shift
    actual_pdf="$(shortcut "$pdf")"
    [[ ! -f "$actual_pdf" ]] \
        && recho "Not a file: $actual_pdf" \
        && return 1
    nohup $VIEWER "$@" "$actual_pdf" &>/dev/null &
}

# shortcut browser
# ----------------
o() {
    header=()
    [[ "$1" == 'spoof' ]] \
        && header=('-header' 'Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:34.0) Gecko/20100101 Firefox/34.0') \
        && shift
    site="$1" && shift
    [[ -z "$site" ]] && site = 'https://google.com' # homepage
    case "$site" in                                 # bookmarks
        500)    site='http://www.math.illinois.edu/~ruiloja/Math500/'                           ;;
        421)    site='https://courses.engr.illinois.edu/cs421/su2016/'                          ;;
        576)    site='https://courses.engr.illinois.edu/cs576/sp2017/'                          ;;
        476)    site='https://courses.engr.illinois.edu/cs476/fa2017/'                          ;;
        522)    site='https://courses.engr.illinois.edu/cs522'                                  ;;
        584)    site='https://wiki.illinois.edu/wiki/pages/viewpage.action?pageId=642598908'    ;;
        fm)     site='https://wiki.illinois.edu/wiki/display/fmseminar/Formal+Methods+Seminar'  ;;
        github) site='https://github.com'                                                       ;;
        gitlab) site='https://gitlab-beta.engr.illinois.edu'                                    ;;
        maudea) site='http://www.csl.sri.com/~eker/Maude/'                                      ;;
        g|google)
            site="https://www.google.com/search?q="
            search_string="$(echo $@ | tr ' ' '+')"
            site="$site$search_string"
            ;;
    esac
    $BROWSER $header $site
}

# shortcut tmux sessions
# ----------------------
ts() {
    command="$1" ; shift
    session="$1"
    case "$command" in
        new)    tmux -S /tmp/shareds-$USER new    -s "$session" ;;
        attach) tmux -S /tmp/shareds-$USER attach -t "$session" ;;
        list)   tmux -S /tmp/shareds-$USER list-sessions        ;;
        *)      echo "Unrecognized 'ts' command: '$command' ..." >&2
                return 1 ;;
    esac
}

# Utilities
# =========

# backup
# ------
backup() {
    dest="$1"
    [[ ! -d "$dest" ]] && return 1
    rsync --progress --partial --archive --verbose --update --delete \
        .mail .ssh admin dotfiles media personal reads src work "$dest"
}

# simple web server
# -----------------
http() {
    python3 -m http.server $@
}

# printing
# --------
p() {
    printer='siebl-2203-printer' && [[ "$1" == '--printer' ]] && shift && printer="siebl-$1-printer" && shift
    copies='1' && echo "$1" | grep '^[0-9]*$' &>/dev/null && copies="$1" && shift
    sides='-o sides=two-sided-long-edge' && [[ "$1" == 'onesided' ]] && sides='-o sides=one-sided' && shift
    pages='' && [[ "$1" == 'pages' ]] && pages='-o page-ranges='"$2" && shift && shift
    file="$(shortcut "$1")" && [[ ! -f "$file" ]] && echo "No file '$file'" && return 1
    shift
    lpr '-#'$copies $pages $sides $@ "$file"
}

print_setup() {
    printer_name="$1" && shift
    sudo lpadmin -p "$printer_name" -P /etc/cups/ppd/"$printer_name".ppd \
                 -o printer-is-shared=false -o printer-error-policy=abort-job \
                 -o job-sheets-default=none -o sides=two-sided-long-edge \
                 -o wrap=true -o prettyprint=true \
                 -v lpd://engr-print-01.engr.illinois.edu/"$printer_name"
    sudo cupsaccept "$printer_name"
    sudo cupsenable "$printer_name"
}

# mail
# ----
m() { mukk "$@" ; }

# markdown publishing
# -------------------
md() {
    format="$1"
    md_doc="$2"

    case "$format" in
        markdown)   ext='md'                    ;;
        latex)      ext='pdf'                   ;;
        latex-raw)  ext='tex'; format='latex'   ;;
        beamer)     ext='pdf'                   ;;
        beamer-raw) ext='tex'; format='beamer'  ;;
        *)          ext="$format"               ;;
    esac

    pandoc --standalone --filter=pandoc-citeproc \
           --from=markdown --to="$format" \
           --output="${md_doc%.*}.$ext" "$md_doc" \
           || echo "pandoc error ..." >&2
}

# schedule today
# --------------
today() {
    day_offset="$1"
    schedule_file="$PERSONAL/schedule.md"
    [[ -z "$day_offset" ]] && day_offset='0'
    dDay="$(date --date="$day_offset days" +%A | awk '{print tolower($0)}')"
    dDate="$(date --date="$day_offset days" +'%b %-d')"
    pandoc-tangle --from=markdown --to=markdown \
                  --section="$dDay|$dDate" "$schedule_file"
}

# System
# ======

# copy etc
# --------
cp_etc() {
    dir="$1"
    [[ ! -d "$DOTFILES/etc/$dir" ]] && return 1
    files=($(find "$DOTFILES/etc/$dir" -type f))
    for file in $files; do
        dest="$ETC/${file#$DOTFILES/etc/}"
        echo "copying '$file' to '$dest'..."
    done
    for file in $(find "$DOTFILES/etc/$dir" -type f); do
        dest="$ETC/${file#$DOTFILES/etc/}"
        sudo cp "$file" "$dest"
    done
}

# kernel building
# ---------------
rebuild_kernel() {
    sudo mount /dev/sda2 /boot
    sudo make -j5 -l15 \
        && sudo make modules_install \
        && sudo make install \
        && sudo grub-mkconfig -o /boot/grub/grub.cfg
}

# X-11
# ====

# mpv on remote server
# --------------------
remote_mpv() {
    server="$1"
    [[ -z "$server" ]] && return 1
    url="$2"
    [[ -z "$url" ]] && return 1
    ssh $1 'export DISPLAY=:0; mpv '"$url"
}

# remote x control
# ----------------
xdo_remote() {
    ssh_serv="$1"
    [[ -z "$ssh_serv" ]] && return 1
    remote_command='export DISPLAY=:0; while read key_line; do'
    remote_command="$remote_command"' xdotool key $keyline; done'
    xdotoolize | ssh "$ssh_serv" "$remote_command"
}

# Random
# ======

# testing run for maude
# ---------------------
maude_test() {
    test_path="$1" && shift
    monitor files "$test_path.maude" contrib/systems/*.maude contrib/tools/*/*.maude -- ./build test "$test_path" "$@"
}
