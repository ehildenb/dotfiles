# Default Options
# ===============

# colorized output
# ----------------
alias ls='ls --color=auto'
[[ "$OS_DISTRO" == "freebsd" ]] && alias ls='ls -G'
alias grep='grep --color=auto'
alias wifi='net wifi'
becho() { echo '\033[0;34m'$@'\033[0m' }
gecho() { echo '\033[0;32m'$@'\033[0m' }
recho() { echo '\033[0;31m'$@'\033[0m' }

# shortcuts in home directory
# ---------------------------
shortcut() {
    short_path="$1"
    long_path="$short_path"
    if [[ ! -f "$short_path" && ! -d "$short_path" ]]; then
        case "$short_path" in
            '')         long_path="$HOME"                                          ;;
            '-')        long_path="-"                                              ;;
            contacts)   long_path="$DOTFILES/mail/mutt/contacts"                   ;;
            aliases)    long_path="$DOTFILES/zsh/aliases"                          ;;
            schedule)   long_path="$HOME/personal/schedule.md"                     ;;
            maude)      long_path="$SRC/maude/manual.pdf"                          ;;
            wifi)       long_path="$DOTFILES/etc/wpa_supplicant/wifi_networks"     ;;
            dotfiles*)  long_path="$DOTFILES${short_path#dotfiles}"                ;;
            bin*)       long_path="$DOTFILES/bin${short_path#bin}"                 ;;
            500*)       long_path="$HOME/work/class/uiuc-math500${short_path#500}" ;;
            570*)       long_path="$HOME/work/class/uiuc-math570${short_path#570}" ;;
            576*)       long_path="$HOME/reads/uiuc-cs576${short_path#576}"        ;;
            476*)       long_path="$HOME/work/ta/cs476/fa2017${short_path#476}"    ;;
            ci*)        long_path="$HOME/work/fsl-ci${short_path#ci}"              ;;
            evm*)       long_path="$HOME/work/evm-semantics${short_path#evm}"      ;;
            fm*)        long_path="$HOME/work/fm_seminar${short_path#fm}"          ;;
            kat*)       long_path="$HOME/work/k/kat/${short_path#kat}"             ;;
            oppen*)     long_path="$HOME/work/oppen-bus${short_path#oppen}"        ;;
            k*)         long_path="$HOME/src/k/$K_VERSION${short_path#k}"          ;;
            reads*)     long_path="$HOME/reads${short_path#reads}"                 ;;
            scratch*)   long_path="$SCRATCH${short_path#scratch}"                  ;;
        esac
    fi
    printf "%s\n" "$long_path"
}

# eventually replace with
#hash -d -- mutt="$DOTFILES/mail/mutt/"         ;;
#hash -d -- zsh="$DOTFILES/zsh"                 ;;
#hash -d -- maude="$SRC/maude"                  ;;
#hash -d -- dotfiles="$DOTFILES"                ;;
#hash -d -- bin="$DOTFILES/bin"                 ;;
#hash -d -- 500="$HOME/work/class/uiuc-math500" ;;
#hash -d -- 570="$HOME/work/class/uiuc-math570" ;;
#hash -d -- 576="$HOME/work/uiuc-cs576"         ;;
#hash -d -- fm="$HOME/work/fm_seminar"          ;;
#hash -d -- k="$HOME/work/k"                    ;;
#hash -d -- scratch="$SCRATCH"                  ;;
#hash -d -- evm="$HOME/work/evm-modeling"       ;;
#hash -d -- reviews="$HOME/work/reviews"        ;;

# convenient cd
# -------------
chpwd() { ls }              # ls when cd
c() {
    dirname="$1"
    cd "$(shortcut "$dirname")"
}

# longer tail/head
# ----------------
alias tail='tail -n30'
alias head='head -n30'

# compression
# -----------
alias tarx='tar -xvf'
tarc() { tar -cvf $1.tar $1 }
zipd() { zip -rv $1.zip $1 }
alias unrar='unrar e'

# backup
# ------
backup() {
    dest="$1"
    [[ ! -d "$dest" ]] && return 1
    rsync --progress --partial --archive --verbose --update --delete \
        dotfiles .mail media .passwd reads src .ssh work "$dest"
}

# simple web server
# -----------------
http() {
    python -m http.server $@
}

# Shortcuts/Bookmarks
# ===================

# editor
# ------
e() {
    file="$1" && shift
    $EDITOR "$(shortcut "$file")" $@
}

# viewer
# ------
v() {
    pdf="$1" && shift
    $VIEWER "$(shortcut "$pdf")" $@
}

# browser
# -------
o() {
    header=()
    [[ "$1" == 'spoof' ]] \
        && header=('-header' 'Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:34.0) Gecko/20100101 Firefox/34.0') \
        && shift
    site="$1" && shift
    [[ -z "$site" ]] && site = 'https://google.com' # homepage
    case "$site" in                                 # bookmarks
        500)    site='http://www.math.illinois.edu/~ruiloja/Math500/'                           ;;
        421)    site='https://courses.engr.illinois.edu/cs421/su2016/'                          ;;
        576)    site='https://courses.engr.illinois.edu/cs576/sp2017/'                          ;;
        476)    site='https://courses.engr.illinois.edu/cs476/fa2017/'                          ;;
        522)    site='https://courses.engr.illinois.edu/cs522'                                  ;;
        fm)     site='https://wiki.illinois.edu/wiki/display/fmseminar/Formal+Methods+Seminar'  ;;
        github) site='https://github.com'                                                       ;;
        gitlab) site='https://gitlab-beta.engr.illinois.edu'                                    ;;
        maudea) site='http://www.csl.sri.com/~eker/Maude/'                                      ;;
        g|google)
            site="https://www.google.com/search?q="
            search_string="$(echo $@ | tr ' ' '+')"
            site="$site$search_string"
            ;;
    esac
    $BROWSER $header $site
}

# printing
# --------
p() {
    copies='1' && echo "$1" | grep '^[0-9]*$' &>/dev/null && copies="$1" && shift
    sides='-o sides=two-sided-long-edge' && [[ "$1" == 'onesided' ]] && sides='-o sides=one-sided' && shift
    pages='' && [[ "$1" == 'pages'    ]] && pages='-o page-ranges='"$2" && shift && shift
    file="$(shortcut "$1")" && [[ ! -f "$file" ]] && echo "No file '$file'" && return 1
    shift
    lpr '-#'$copies $pages $sides $@ "$file"
}

# mail
# ----
m() {
    if [[ "$#" -lt '1' ]]; then
        mutt
        return
    fi
    case "$1" in
        c|check)
            if [[ "$(ps aux | grep -c offlineimap)" -gt '1' ]]; then
                pkill -9 offlineimap
                rm ~/.offlineimap/pid
            fi
            offlineimap
            ;;
        *)
            echo "Unrecognized option: '$1'"
            return 1
            ;;
    esac
}

# crop pdf
# --------
crop_pdf() {
    start_page="$1"  && shift
    stop_page="$1"   && shift
    input_file="$1"  && shift
    output_file="$1" && shift
    [[ -z "$start_page" ]] || [[ -z "$stop_page" ]] \
        || [[ ! -f "$input_file" ]] || [[ -z "$output_file" ]] \
        && return 1
    gs -dFirstPage="$start_page" -dLastPage="$stop_page" \
        -sOutputFile="$output_file" -dSAFER -dNOPAUSE -dBATCH \
        -dPDFSETTING=/default -sDEVICE=pdfwrite -dCompressFonts=true \
        -c ".setpdfwrite << /EncodeColorImages true /DownsampleMonoImages false \
        /SubsetFonts true /ASCII85EncodePages false \
        /DefaultRenderingIntent /Default /ColorConversionStrategy \
        /LeaveColorUnchanged /MonoImageDownsampleThreshold 1.5 \
        /ColorACSImageDict << /VSamples [ 1 1 1 1 ] /HSamples [ 1 1 1 1 ] \
        /QFactor 0.4 /Blend 1 >> /GrayACSImageDict << /VSamples [ 1 1 1 1 ] \
        /HSamples [ 1 1 1 1 ] /QFactor 0.4 /Blend 1 >> \
        /PreserveOverprintSettings false /MonoImageResolution 300 \
        /MonoImageFilter /FlateEncode /GrayImageResolution 300 \
        /LockDistillerParams false /EncodeGrayImages true /MaxSubsetPCT 100 \
        /GrayImageDict << /VSamples [ 1 1 1 1 ] /HSamples [ 1 1 1 1 ] \
        /QFactor 0.4 /Blend 1 >> /ColorImageFilter /FlateEncode \
        /EmbedAllFonts true /UCRandBGInfo /Remove /AutoRotatePages /PageByPage \
        /ColorImageResolution 300 /ColorImageDict << /VSamples [ 1 1 1 1 ] \
        /HSamples [ 1 1 1 1 ] /QFactor 0.4 /Blend 1 >> /CompatibilityLevel 1.7 \
        /EncodeMonoImages true /GrayImageDownsampleThreshold 1.5 \
        /AutoFilterGrayImages false /GrayImageFilter /FlateEncode \
        /DownsampleGrayImages false /AutoFilterColorImages false \
        /DownsampleColorImages false /CompressPages true \
        /ColorImageDownsampleThreshold 1.5 /PreserveHalftoneInfo false >> \
        setdistillerparams" -f "$input_file"
}

# join pdfs
join_pdf() {
    output_file="$1" && shift
    [[ -f "$output_file" ]] \
        && echo "File '$output_file' exists!!!" \
        && return 1
    gs -dBATCH -dNOPAUSE -sDEVICE=pdfwrite -sOutputFile=$output_file $@
}

# markdown publishing
md() {
    format="$1"
    md_doc="$2"

    case "$format" in
        markdown)   ext='md'                    ;;
        latex)      ext='pdf'                   ;;
        latex-raw)  ext='tex'; format='latex'   ;;
        beamer)     ext='pdf'                   ;;
        beamer-raw) ext='tex'; format='beamer'  ;;
        *)          ext="$format"               ;;
    esac

    pandoc --standalone --filter=pandoc-citeproc \
           --from=markdown --to="$format" \
           --output="${md_doc%.*}.$ext" "$md_doc" \
           || echo "pandoc error ..." >&2
}


# System
# ======

# copy etc
# --------
cp_etc() {
    dir="$1"
    [[ ! -d "$DOTFILES/etc/$dir" ]] && return 1
    files=($(find "$DOTFILES/etc/$dir" -type f))
    for file in $files; do
        dest="$ETC/${file#$DOTFILES/etc/}"
        echo "copying '$file' to '$dest'..."
    done
    for file in $(find "$DOTFILES/etc/$dir" -type f); do
        dest="$ETC/${file#$DOTFILES/etc/}"
        sudo cp "$file" "$dest"
    done
}

# kernel building
# ---------------
rebuild_kernel() {
    sudo mount /dev/sda2 /boot
    sudo make -j5 -l15 \
        && sudo make modules_install \
        && sudo make install \
        && sudo grub-mkconfig -o /boot/grub/grub.cfg
}

# RV K
# ----
alias rvk="$SRC/k/k-distribution/target/release/k/bin/krun"
alias rvkompile="$SRC/k/k-distribution/target/release/k/bin/kompile"

# Scheduling
# ==========

# schedule today
# --------------
today() {
    day_offset="$1"
    schedule_file="$PERSONAL/schedule.md"
    [[ -z "$day_offset" ]] && day_offset='0'
    dDay="$(date --date="$day_offset days" +%A | awk '{print tolower($0)}')"
    dDate="$(date --date="$day_offset days" +'%b %-d')"
    pandoc-tangle --from=markdown --to=markdown \
                  --section="$dDay|$dDate" "$schedule_file"
}


# X-11
# ====

# startx aliases
# --------------
alias as_sandbox='sudo -u sandbox'
i3socket() {
    i3_sandbox=$(as_sandbox -- ls /tmp/ | grep i3-sandbox | head -n1)
    i3_socket=$(as_sandbox -- ls "/tmp/$i3_sandbox/" | grep ipc-socket | head -n1)
    echo "/tmp/$i3_sandbox/$i3_socket"
}
starti3() {
    as_sandbox -- rm -rf /tmp/i3-sandbox*
    as_sandbox -- startx /usr/bin/i3
}
in_i3() {
    workspace="$1" && shift
    as_sandbox -- i3-msg --socket $(i3socket) "workspace $workspace; exec $@"
}
firefox() { in_i3 1 "/usr/bin/firefox $@" }
private() { in_i3 4 "/usr/bin/firefox -private $@" }
slack()   { in_i3 2 "/usr/bin/slack $@" }
mpv()     { in_i3 3 "/usr/bin/mpv $@" }

# mpv on remote server
# --------------------
remote_mpv() {
    server="$1"
    [[ -z "$server" ]] && return 1
    url="$2"
    [[ -z "$url" ]] && return 1
    ssh $1 'export DISPLAY=:0; mpv '"$url"
}

# remote x control
# ----------------
xdo_remote() {
    ssh_serv="$1"
    [[ -z "$ssh_serv" ]] && return 1
    remote_command='export DISPLAY=:0; while read key_line; do'
    remote_command="$remote_command"' xdotool key $keyline; done'
    xdotoolize | ssh "$ssh_serv" "$remote_command"
}
